user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  8192;
    use epoll;
    multi_accept on;

}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;

    # 기존 https 설정 영역
    server {
      # listen 80;
      # server_name yourdomain.com;

      # SSL 설정 (HTTPS 요청 처리)
      listen 443 ssl;
      ssl_certificate /etc/nginx/ssl/nextory.crt;
      ssl_certificate_key /etc/nginx/ssl/nextory.key;
      ssl_protocols TLSv1.2 TLSv1.3;
      ssl_ciphers HIGH:!aNULL:!MD5;

      location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;

        # BotfenderAI Content Modification 설정
        # HTML 응답에서 문자열 치환
        sub_filter_once off;
        # 수동으로 추가한 `<script>` 태그 삭제 (큰따옴표, 작은따옴표, 따옴표 없는 경우 포함)
        sub_filter '<script src="/1dba6f43-e141-4072-9d29-3a531d8bf1dc/"></script>' '';
        sub_filter '<script src=\'/1dba6f43-e141-4072-9d29-3a531d8bf1dc/\'></script>' '';
        sub_filter '<script src=/1dba6f43-e141-4072-9d29-3a531d8bf1dc/></script>' '';
        # `<head>` 태그 내부에 스크립트 삽입
        sub_filter '<head>' '<head><script src="/1dba6f43-e141-4072-9d29-3a531d8bf1dc/"></script>\n';
      }
    
      # BotfenderAI 리버스 프록시 설정
      location /1dba6f43-e141-4072-9d29-3a531d8bf1dc/ {
        proxy_pass https://172.30.1.200:3000;

        proxy_set_header Host $host;
        proxy_set_header NX-Real-Host $host;
        proxy_set_header NX-Real-IP $remote_addr;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
      }
    }
}
